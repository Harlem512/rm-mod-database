-- recycle the steam handler
global.rm_mp.then(undefined, global.rm_mp.callback_handler)

if global.steam_lobby_get_lobby_id() == 0 { return }
let net_buffer = global.rm_mp.net_buffer

-- updates the active players
global.rm_mp.sync_peers()

-- MARK: NETCODE
while global.steam_net_packet_receive() {
  -- check packet size
  if global.steam_net_packet_get_size() > 450 {
    global.rm_mp.log("WARN: received invalid packet size")
    continue
  }
  -- empty the buffer, or data will leak through
  buffer_fill(net_buffer, 1, buffer_u8, 0, 450)
  -- get next packet
  global.steam_net_packet_get_data(net_buffer)

  -- read buffer data
  match buffer_peek(net_buffer, 0, buffer_u8) {
    -- MARK: Player sync
    -- sent every 10 frames
    case 0x01 {
      -- sender
      let sender = global.steam_net_packet_get_sender_id()
      let inst = global.rm_mp.peer_instances[sender]
      if !instance_exists(inst) {
        global.rm_mp.log(["ERR: peer doesn't exist for 0x01", sender])
        continue
      }

      -- read buffer
      let room = buffer_peek(net_buffer, 1, buffer_u16)
      let next_x = buffer_peek(net_buffer, 3, buffer_s16)
      let next_y = buffer_peek(net_buffer, 5, buffer_s16)
      let next_aim = buffer_peek(net_buffer, 7, buffer_f16)
      let hook_x = buffer_peek(net_buffer, 9, buffer_s16)
      let hook_y = buffer_peek(net_buffer, 11, buffer_s16)
      let emote = buffer_peek(net_buffer, 13, buffer_u8)
      let data = buffer_peek(net_buffer, 14, buffer_u8)

      if inst.next_x == undefined or inst.room != room or data & 4 {
        -- reset lerp position if
        --  the player hasn't been initialized
        --  OR the room is different
        --  OR player re-spawning
        inst.last_x = next_x
        inst.last_y = next_y
        inst.last_aim = next_aim
        -- set lerp positions, in case multiple packets arrive on the
        -- same frame
        inst.x = next_x
        inst.y = next_y
        inst.aim_dir = next_aim
      } else {
        -- update last with current lerp position
        inst.last_x = inst.x
        inst.last_y = inst.y
        inst.last_aim = inst.aim_dir
      }

      -- set target position
      inst.next_x = next_x
      inst.next_y = next_y
      inst.next_aim = next_aim

      -- set room
      inst.room = room
      -- set hook x/y
      inst.hook_x = hook_x
      inst.hook_y = hook_y
      -- set emote
      if emote {
        inst.emote = emote - 1
        inst.emote_timer = 100
      }
      
      -- read data
      let plr_state = data & 3
      if plr_state {
        inst.crouching = plr_state == 2
        inst.wall_hug = plr_state - 2
      } else {
        inst.crouching = false
        inst.wall_hug = 0
      }
      -- set weapon
      inst.weapon = data >> 5
      -- set flying state
      inst.flying = data & 8

      -- update packet timing
      inst.time_to_lerp = inst.since_last_packet
      inst.since_last_packet = 0
      inst.lerp_counter = 0
    }
    
    -- MARK: Palette
    -- sent when a peer in the lobby changes character
    case 0x02 {
      let sender = global.steam_net_packet_get_sender_id()
      let inst = global.rm_mp.peer_instances[sender]
      if !instance_exists(inst) {
        global.rm_mp.log(["ERR: peer doesn't exist for 0x02", sender])
        continue
      }

      -- read buffer data
      let data = buffer_peek(net_buffer, 449, buffer_u8)

      let character = clamp((data & 3) - 1, 0, 3)

      -- delete old palette
      if inst.palette {
        sprite_delete(inst.palette)
        inst.palette = undefined
      }

      -- load backup palette
      inst.safe_palette = global.rm_mp.sprites_default_palette[character]

      -- LOAD PALETTE
      if data & 128 and global.rm_mp.enable_palette_packets {
        -- create temp buffer
        let buff = buffer_create(448, buffer_fixed, 1)
        -- create temp surface
        let surf = surface_create(2, 56)
        -- copy palette part
        buffer_copy(net_buffer, 1, 448, buff, 0)
        -- copy buffer to surface
        buffer_set_surface(buff, surf, 0)
        -- create palette sprite
        inst.palette = sprite_create_from_surface(surf, 0, 0, 2, 56, false, false, 0, 0)
        -- clean up
        buffer_delete(buff)
        surface_free(surf)
      }
      
      inst.character = character
      inst.name_offset = global.rm_mp.name_offsets[character]
      inst.wall_hug_sprite = global.rm_mp.sprites_wallhug_render[character]

      -- cache character / palette
      global.rm_mp.peer_cache_character[sender] = character
      global.rm_mp.peer_cache_palette[sender] = inst.palette

      global.rm_mp.log(["<< plr pal", data, inst.name])
    }
    else {
      global.rm_mp.packet_receive_other()
    }
  }
}
