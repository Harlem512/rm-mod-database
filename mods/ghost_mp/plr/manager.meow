-- MARK: Docs

-- 0x01 player update
-- | Byte  | Data       | Desc             |
-- | ----- | ---------- | ---------------- |
-- | 0     | buffer_u8  | 0x01: plr update |
-- | 1,2   | buffer_u16 | room             |
-- | 3,4   | buffer_s16 | x-position       |
-- | 5,6   | buffer_s16 | y-position       |
-- | 7,8   | buffer_f16 | look angle       |
-- | 9,10  | buffer_s16 | grapple x        |
-- | 11,12 | buffer_s16 | grapple y        |
-- | 13    | buffer_u8  | data 1           |
-- | 14    | buffer_u8  | data 2           |

-- data 1
-- | Bit   | Desc         |
-- | ----- | ------------ |
-- | 0,1,2 | Emote, 0,1,2 |

-- data 2
-- | Bit | Desc                                            |
-- | --- | ----------------------------------------------- |
-- | 0,1 | 1: wall hug left 2: crouching 3: wall hug right |
-- | 2   | Damage taken                                    |
-- | 3   | Is flying                                       |
-- | 5-7 | Weapon select                                   |


if global.steam_lobby_get_lobby_id() == 0 { return }

let net_buffer = global.rm_mp.net_buffer

-- updates the active players
global.rm_mp.sync_peers()

-- MARK: NETCODE
while global.steam_net_packet_receive() {
  -- check packet size
  if global.steam_net_packet_get_size() > 450 { continue }
  -- empty the buffer, or data will leak through
  buffer_fill(net_buffer, 1, buffer_u8, 0, 450)
  -- get next packet
  global.steam_net_packet_get_data(net_buffer)

  -- read buffer data
  match buffer_peek(net_buffer, 0, buffer_u8) {
    -- MARK: Player sync
    -- sent every 10 frames
    case 0x01 {
      -- sender
      let sender = global.steam_net_packet_get_sender_id()
      let inst = global.rm_mp.player_peers[sender]
      if !instance_exists(inst) { continue }

      -- read buffer
      let room = buffer_peek(net_buffer, 1, buffer_u16)
      let next_x = buffer_peek(net_buffer, 3, buffer_s16)
      let next_y = buffer_peek(net_buffer, 5, buffer_s16)
      let next_aim = buffer_peek(net_buffer, 7, buffer_f16)
      let hook_x = buffer_peek(net_buffer, 9, buffer_s16)
      let hook_y = buffer_peek(net_buffer, 11, buffer_s16)
      let emote = buffer_peek(net_buffer, 13, buffer_u8)
      let data = buffer_peek(net_buffer, 14, buffer_u8)

      if inst.next_x == undefined or inst.room != room or data & 4 {
        -- reset lerp position if
        --  the player hasn't been initialized
        --  OR the room is different
        --  OR player re-spawning
        inst.last_x = next_x
        inst.last_y = next_y
        inst.last_aim = next_aim
      } else {
        -- update last with current lerp position
        inst.last_x = inst.x
        inst.last_y = inst.y
        inst.last_aim = inst.aim_dir
      }

      -- set target position
      inst.next_x = next_x
      inst.next_y = next_y
      inst.next_aim = next_aim

      -- set room
      inst.room = room
      -- set hook x/y
      inst.hook_x = hook_x
      inst.hook_y = hook_y
      -- set emote
      if emote {
        inst.emote = emote - 1
        inst.emote_timer = 100
      }
      
      -- read data
      let plr_state = data & 3
      if plr_state {
        inst.crouching = plr_state == 2
        inst.wall_hug = plr_state - 2
      } else {
        inst.crouching = false
        inst.wall_hug = 0
      }
      -- set weapon
      inst.weapon = data >> 5
      -- set flying state
      inst.flying = data & 8

      -- update packet timing
      inst.time_to_lerp = inst.since_last_packet
      inst.since_last_packet = 0
      inst.lerp_counter = 0
    }
    
    -- MARK: Palette
    -- sent when a peer in the lobby changes character
    case 0x02 {
      let sender = global.steam_net_packet_get_sender_id()
      let inst = global.rm_mp.player_peers[sender]
      if !instance_exists(inst) { continue }

      -- read buffer data
      let data = buffer_peek(net_buffer, 449, buffer_u8)

      let character = (data & 3) - 1

      -- delete old palette
      if inst.palette {
        sprite_delete(inst.palette)
        inst.palette = undefined
      }

      -- load backup palette
      inst.safe_palette = global.rm_mp.sprites_default_palette[character - 1]

      -- LOAD PALETTE
      if data & 128 and global.rm_mp.enable_palette_packets {
        -- create temp buffer
        let buff = buffer_create(448, buffer_fixed, 1)
        -- create temp surface
        let surf = surface_create(2, 56)
        -- copy palette part
        buffer_copy(net_buffer, 1, 448, buff, 0)
        -- copy buffer to surface
        buffer_set_surface(buff, surf, 0)
        -- create palette sprite
        inst.palette = sprite_create_from_surface(surf, 0, 0, 2, 56, false, false, 0, 0)
        -- clean up
        buffer_delete(buff)
        surface_free(surf)
      }
      
      inst.character = character
      inst.name_offset = global.rm_mp.get_name_offset(character)
      inst.wall_hug_sprite = global.rm_mp.get_wallhug_sprite(character)

      -- cache character / palette
      global.rm_mp.player_cache_character[sender] = character
      global.rm_mp.player_cache_palette[sender] = inst.palette
    }
  }
}

-- MARK: Broadcast
with oplayer {
  -- respawn check
  if global.gamestate == 24 or global.gamestate == 29 {
    global.rm_mp.player_fell = true
  }

  -- handle frame counter
  global.rm_mp.frames += 1
  -- don't spam requests and don't send when in a respawning state
  if global.rm_mp.frames < 10 and global.gamestate != 24 and global.gamestate != 29 {
    return
  }
  global.rm_mp.frames = 0

  -- MARK: Position
  let is_hugging = global.rm_mp.sprites_wallhug[self.sprite_index] != undefined

  buffer_seek(net_buffer, buffer_seek_start, 0)
  buffer_write(net_buffer, buffer_u8, 0x01)
  buffer_write(net_buffer, buffer_u16, room_get())
  buffer_write(net_buffer, buffer_s16, round(self.x))
  buffer_write(net_buffer, buffer_s16, round(self.y))
  buffer_write(net_buffer, buffer_f16,
    clamp(
      (self.aim_dir + 90) * self.draw_xscale * 2 / 3 + 120,
      0, 240
    )
  )
  -- hook position
  let hook = instance_find(ohook)
  if hook {
    buffer_write(net_buffer, buffer_s16, floor(hook.x))
    buffer_write(net_buffer, buffer_s16, floor(hook.y))
  } else {
    buffer_write(net_buffer, buffer_s16, -255)
    buffer_write(net_buffer, buffer_s16, -255)
  }

  -- emote
  buffer_write(net_buffer, buffer_u8, global.rm_mp.emote_packet + 1)
  global.rm_mp.emote_packet = -1

  let data = if self.crouching { 2 }
      else if !is_hugging { 0 }
      else if self.draw_xscale > 0 { 3 }
      else { 1 }
  data = data
    | (global.rm_mp.player_fell << 2)
    -- check if ameli is flying
    | ((self.state == 14) << 3)
    | (global.current_weapon_ << 5)
  buffer_write(net_buffer, buffer_u8, data)

  global.rm_mp.broadcast(15)
  global.rm_mp.player_fell = false

  -- get the current character
  let character = if global.maya_mode { 1 } else if global.ameli_mode_ { 2 } else { 0 }

  -- characters are the same, we're done
  if character == global.rm_mp.player_last_character { return }
  
  -- update character
  global.rm_mp.player_last_character = character
  -- build character palette
  global.rm_mp.build_character_packet()
  -- send to all peers
  global.rm_mp.broadcast(450)
}
