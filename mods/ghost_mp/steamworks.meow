-- make this event run forever
let s = method_get_self(ds_map_find_value(global.mod_map,"controller_events_alarm_0"))
s.callTime = infinity
s = method_get_self(global.rmml_map["controller_events_alarm_0"]["ghost_mp"])
s.callTime = infinity

-- MARK: Steam API
global._steam_get_persona_name = external_define("Steamworks_x64.dll", "steam_get_persona_name", dll_cdecl, ty_string, 0)
global._steam_get_user_steam_id = external_define("Steamworks_x64.dll", "steam_get_user_steam_id", dll_cdecl, ty_real, 0)
global._steam_get_user_persona_name = external_define("Steamworks_x64.dll", "steam_get_user_persona_name", dll_cdecl, ty_real, 1, ty_real)
global._steam_initialised = external_define("Steamworks_x64.dll", "steam_initialised", dll_cdecl, ty_real, 0)
global._steam_is_user_logged_on = external_define("Steamworks_x64.dll", "steam_is_user_logged_on", dll_cdecl, ty_real, 0)
global._steam_lobby_activate_invite_overlay = external_define("Steamworks_x64.dll", "steam_lobby_activate_invite_overlay", dll_cdecl, ty_real, 0)
global._steam_lobby_create = external_define("Steamworks_x64.dll", "steam_lobby_create", dll_cdecl, ty_real, 2, ty_real, ty_real)
global._steam_lobby_get_lobby_id = external_define("Steamworks_x64.dll", "steam_lobby_get_lobby_id", dll_cdecl, ty_real, 0)
global._steam_lobby_get_member_count = external_define("Steamworks_x64.dll", "steam_lobby_get_member_count", dll_cdecl, ty_real, 0)
global._steam_lobby_get_member_id = external_define("Steamworks_x64.dll", "steam_lobby_get_member_id", dll_cdecl, ty_real, 1, ty_real)
global._steam_lobby_join_id = external_define("Steamworks_x64.dll", "steam_lobby_join_id", dll_cdecl, ty_real, 1, ty_real)
global._steam_net_packet_get_data = external_define("Steamworks_x64.dll", "steam_net_packet_get_data", dll_cdecl, ty_real, 1, ty_real)
global._steam_net_packet_get_sender_id = external_define("Steamworks_x64.dll", "steam_net_packet_get_sender_id", dll_cdecl, ty_real, 0)
global._steam_net_packet_get_size = external_define("Steamworks_x64.dll", "steam_net_packet_get_size", dll_cdecl, ty_real, 0)
global._steam_net_packet_receive = external_define("Steamworks_x64.dll", "steam_net_packet_receive", dll_cdecl, ty_real, 1, ty_real)
global._steam_net_packet_send = external_define("Steamworks_x64.dll", "steam_net_packet_send", dll_cdecl, ty_real, 5, ty_real, ty_real, ty_real, ty_real, ty_real)
global._steam_net_set_auto_accept_p2p_sessions = external_define("Steamworks_x64.dll", "steam_net_set_auto_accept_p2p_sessions", dll_cdecl, ty_real, 1, ty_real)

global.steam_get_persona_name = fun () { external_call(global._steam_get_persona_name) }
global.steam_get_user_steam_id = fun () { external_call(global._steam_get_user_steam_id) }
global.steam_get_user_persona_name = fun (steamID) { external_call(global._steam_get_user_persona_name, steamID) }
global.steam_initialised = fun () { external_call(global._steam_initialised) }
global.steam_is_user_logged_on = fun () { external_call(global._steam_is_user_logged_on) }
global.steam_lobby_activate_invite_overlay = fun () { external_call(global._steam_lobby_activate_invite_overlay) }
global.steam_lobby_create = fun (type, max_members) { external_call(global._steam_lobby_create, type, max_members) }
global.steam_lobby_get_lobby_id = fun () { external_call(global._steam_lobby_get_lobby_id) }
global.steam_lobby_get_member_count = fun () { external_call(global._steam_lobby_get_member_count) }
global.steam_lobby_get_member_id = fun (index) { external_call(global._steam_lobby_get_member_id, index) }
global.steam_lobby_join_id = fun (lobby_id) { external_call(global._steam_lobby_join_id, lobby_id) }
global.steam_net_packet_get_data = fun (buffer) { external_call(global._steam_net_packet_get_data, buffer) }
global.steam_net_packet_get_sender_id = fun () { external_call(global._steam_net_packet_get_sender_id) }
global.steam_net_packet_get_size = fun () { external_call(global._steam_net_packet_get_size) }
global.steam_net_packet_receive = fun (channel) { external_call(global._steam_net_packet_receive, channel) }
global.steam_net_packet_send = fun (user_id, buffer, size, packet_type, channel) { external_call(global._steam_net_packet_send, user_id, buffer, size, packet_type, channel) }
global.steam_net_set_auto_accept_p2p_sessions = fun (enable) { external_call(global._steam_net_set_auto_accept_p2p_sessions, enable) }

-- ensure p2p is accepted
global.steam_net_set_auto_accept_p2p_sessions(true)
